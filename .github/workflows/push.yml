name: push
on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "*"
jobs:
  setup:
    runs-on: ubuntu-latest
    name: setup
    steps:
      - name: Check if required variables are set set
        id: build-variables
        run: |
          echo ${{ github.event.issue.pull_request }}
          # Check if image should be pushed
          if [ "${{ secrets.PUSH_IMAGE }}" != "" ] && [ "${{ secrets.PUSH_IMAGE }}" == "true" ]; then

            if [ "${{ secrets.IMAGE_REPOSITORY }}" == "" ] || [ "${{ secrets.REGISTRY_USERNAME }}" == "" ] || [ "${{ secrets.REGISTRY_PASSWORD }}" == "" ]; then
              echo "Required Secrets 'IMAGE_REPOSITORY' or 'REGISTRY_USERNAME' or 'REGISTRY_PASSWORD' are not set!"
              exit 1
            fi

            IMAGE_REPOSITORY="${{ secrets.IMAGE_REPOSITORY }}"
            echo "::set-output name=push_image::yes"
            echo "::set-output name=image_registry::${IMAGE_REPOSITORY%/*}"
            echo "::set-output name=image_repository_name::${IMAGE_REPOSITORY##*/}"

          else
            echo "::set-output name=push_image::no"
            echo "::set-output name=image_registry::quay.io/${{ github.repository_owner }}"
            echo "::set-output name=image_repository_name::$(basename $GITHUB_REPOSITORY)"
          fi

          # Set versions based on presence of tag
          if [[ "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            TAG="${GITHUB_REF/refs\/tags\//}"
            echo "::set-output name=image_version::$TAG"
          else
            echo "::set-output name=image_version::latest"
          fi
    outputs:
      image_version: ${{ steps.build-variables.outputs.image_version }}
      image_registry: ${{ steps.build-variables.outputs.image_registry }}
      image_repository_name: ${{ steps.build-variables.outputs.image_repository_name }}
      push_image: ${{ steps.build-variables.outputs.push_image }}

  build:
    runs-on: ubuntu-latest
    name: build
    needs: ["setup"]
    env:
      IMAGE_REGISTRY: "${{ needs.setup.outputs.image_registry }}"
      IMAGE_REPOSITORY_NAME: "${{ needs.setup.outputs.image_repository_name }}"
      IMAGE_VERSION: "${{ needs.setup.outputs.image_version }}"
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Operator Registry
        if: ${{ needs.setup.outputs.push_image == 'yes' && !github.event.pull_request }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: "Build Image"
        if: ${{ needs.setup.outputs.push_image == 'no' || github.event.pull_request }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Containerfile
          push: false
          tags: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY_NAME }}:latest,${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY_NAME }}:${{ env.IMAGE_VERSION }}"

      - name: "Build and Push Image"
        if: ${{ needs.setup.outputs.push_image == 'yes' && !github.event.pull_request }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Containerfile
          push: true
          tags: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY_NAME }}:latest,${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY_NAME }}:${{ env.IMAGE_VERSION }}"
